{"version":3,"sources":["components/Pokemon.js","components/FightsNumber.js","components/DisplayChaos.js","App.js","components/PokemonInfo.js","PokeInfo.js","serviceWorker.js","index.js"],"names":["Pokemon","pokemon","estado","className","FightsNumber","props","DisplayChaos","App","state","value","response","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","xhr","XMLHttpRequest","results","IsThereChaos","chaos","console","log","fightsNumber","addEventListener","JSON","parse","responseText","petitions","FightsList","FightsArray","resultsArray","winner","ReactDOM","render","colSpan","map","d","idx","loser","document","getElementById","e","open","send","onSubmit","type","onChange","Component","PokemonInfo","Image","initialMove","initialAbility","primaryType","src","PokeInfo","image","move","ability","url","toLocaleLowerCase","moves","types","abilities","sprites","front_default","name","index","array","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3514f519.chunk.js","sourcesContent":["\nimport React from 'react';\n\n\nconst Pokemon = ({ pokemon , estado}) => {   \n        \n    return(  \n        <div className=\"pokemon\">\n   \n        <h2 className=\"pokemon-title\">{pokemon}</h2>\n        <span className=\"pokemon-subtitle\">{estado}</span> <br></br>               \n       </div>\n      );    \n}\n\nexport default Pokemon;\n","import React from 'react';\n\nconst FightsNumber = ({ props }) => {\n  \n    return (\n      <div>\n        <center><h1>Number of Fights: </h1> <p className=\"result\">{props}</p></center>       \n        <hr></hr>\n      </div>\n    )\n  };\n\nexport default FightsNumber;","import React from 'react';\n\nconst DisplayChaos = () => {\n    return (\n      <div>\n        <center><h1>Something is not right, it seems like the results may not be reached trough normal conditions! </h1></center>       \n      </div>\n    )\n  };\n\nexport default DisplayChaos;","import React, { Component } from 'react'\nimport './App.css';\nimport ReactDOM from 'react-dom';\nimport Pokemon from './components/Pokemon';\nimport FightsNumber from './components/FightsNumber';\nimport DisplayChaos from './components/DisplayChaos';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);  \n    this.state = { value: '' };\n    this.state = { response: [] };  \n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this); \n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) { \n \n    event.preventDefault();\n    var xhr = new XMLHttpRequest()\n    var url = \"https://6og08elki9.execute-api.us-east-1.amazonaws.com/Dev/Palletwar\";\n\n    const results = this.state.value; // '[\"Charmander\",\"Squirtle\", \"Bulbasaur\"]';\n\n    function IsThereChaos(chaos) {\n      console.log(\"Is there chaos \" + chaos.chaos);\n      if (chaos.chaos == \"Y\") {\n        return <DisplayChaos />;\n      }\n\n      console.log(\"fights number  \" + chaos.fightsNumber);\n      return <FightsNumber props={chaos.fightsNumber} />;\n    }\n\n    // Se recibe la respuesta de la peticiÃ³n\n    xhr.addEventListener ( 'load', () => {\n      try{\n      this.setState({ response: JSON.parse(xhr.responseText) });\n      this.setState({ chaos: this.state.response.chaos });\n      this.setState({ petitions: this.state.response.petitions });\n      this.setState({ fightsNumber: this.state.response.fightsNumber });\n      this.setState({ FightsList: this.state.response.FightsArray });      \n\n      function FightListPrint(props) {                       \n        return (\n          <div className=\"App\">\n            <table>\n              <thead> \n                <tr>\n                  <th colSpan='2'>\n                    <h1>Fights Results</h1>\n                  </th>                \n                </tr>               \n              </thead>\n              <tbody>\n                {props.map(function (d, idx) {\n                  return (\n                    <tr>\n                      <td>                      \n                        <Pokemon pokemon={d.winner} estado={'Winner'} />                        \n                      </td>\n                      <div>\n                        VS\n                      </div>\n                      <td>                                              \n                        <Pokemon pokemon={d.loser} estado={'Loser'} />                        \n                      </td>\n                    </tr>)                  \n                })}\n              </tbody>\n              <tfoot></tfoot>\n            </table>\n          </div>\n        );\n      }            \n      if (this.state.chaos == \"N\"){\n        // seguimiento\n        console.log(\"response \" + xhr.responseText);\n        console.log(\"response resultsarray \" + this.state.response.resultsArray);\n        console.log(\"response chaos \" + this.state.response.chaos + \" ||  state chaos \" + this.state.chaos);\n        console.log(\"response fightsNumber \" + this.state.response.fightsNumber + \" ||  state fightsnumber \" + this.state.fightsNumber);\n        console.log(\"response petitions \" + this.state.response.petitions + \" state petitions  \" + this.state.petitions);\n        console.log(\"response fightsArray \" + this.state.response.FightsArray + \" state fightsArray \" + this.state.FightsList[0].winner);\n        \n        ReactDOM.render(FightListPrint(this.state.FightsList), document.getElementById('FightsList'));        \n      }else\n      {\n        console.log(\"chaos other chaos \"+this.state.chaos);\n        ReactDOM.render(<div></div>, document.getElementById('FightsList'));\n      }\n      ReactDOM.render(<IsThereChaos chaos={this.state.chaos} fightsNumber={this.state.fightsNumber} />, document.getElementById('FightsNumber'));      \n    }\n    catch(e) {         \n        ReactDOM.render(<span>something is wrong with the fights... </span> , \n            document.getElementById('FightsList'));\n    } \n    })\n\n    // Se genera la peticiÃ³n\n    xhr.open('POST', url)\n    xhr.send(results)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              <span><h2>Results:</h2> </span>\n              <input className=\"inputText\" type=\"text\" value={this.state.value} onChange={this.handleChange} />           \n            <input type=\"submit\" value=\"Submit\" /> </label>\n          </form>\n\n        </header>\n      </div>\n    )\n  }\n}\nexport default App;\n","\nimport React from 'react';\n\nconst PokemonInfo = ({ pokemon, Image , initialMove, initialAbility, primaryType}) => {   \n        \n    return(  \n        <div className=\"pokemon\">   \n            <h2 className=\"pokemon-title\">{pokemon}</h2>\n            <img className=\"pokemon-image\" src={Image} />\n            <hr></hr>\n            <span className=\"pokemon-subtitle\">Initial move: {initialMove}</span> <br></br>               \n            <span className=\"pokemon-subtitle\">Initial Ability: {initialAbility}</span> <br></br>                                       \n            <span className=\"pokemon-subtitle\">Primary Type: {primaryType}</span> <br></br>               \n        </div>\n      );    \n}\n\nexport default PokemonInfo;\n","import React, { Component } from 'react'\nimport './App.css';\nimport ReactDOM from 'react-dom';\nimport PokemonInfo from './components/PokemonInfo';\n\nclass PokeInfo extends Component {\n\n  constructor(props) {\n    super(props);    \n    this.state = { value: '' };    \n    this.state = { response: [] };\n    this.state = { image: '' };    \n    this.state = { move: '' };    \n    this.state = { ability: '' };    \n    this.state = { type: '' };                \n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this); \n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) { \n    const results = this.state.value; // '[\"Charmander\",\"Squirtle\", \"Bulbasaur\"]';   \n\n    console.log(\"whosh \"+results);\n    event.preventDefault();\n    var xhr = new XMLHttpRequest()\n    var url = \"https://pokeapi.co/api/v2/pokemon/\"+results.toLocaleLowerCase();   \n    var moves= '';\n    var types = '';\n    var abilities = '';\n    \n   \n        // Se recibe la respuesta de la peticiÃ³n\n        xhr.addEventListener ( 'load', () => {\n            try {\n                this.setState({ response: JSON.parse(xhr.responseText)});\n                this.setState({ image: this.state.response.sprites.front_default });\n                this.setState({ move: this.state.response.moves[0].move.name });\n                this.setState({ ability: this.state.response.abilities[0].ability.name });\n                this.setState({ type: this.state.response.types[0].type.name });\n                function ConcatAbilities(value, index, array) {\n                    if (abilities != null){ abilities = abilities + \", \"+array[index].ability.name;}\n                    else{ abilities= array[index].ability.name; }            \n                }\n\n                function ConcatMoves(value, index, array) {\n                    if (moves != null){ moves = moves + \", \"+array[index].move.name;}\n                    else{ moves= array[index].move.name;}                      \n                }\n\n                function ConcatTypes(value, index, array) \n                    {if (types != null){ types = types + \", \"+array[index].type.name; }\n                    else { types = array[index].type.name; }\n                }\n                            \n                console.log(this.state.value);\n                console.log(this.state.response.abilities[0].ability.name);\n                console.log(this.state.response.moves[0].move.name);\n                console.log(this.state.response.sprites.front_default);\n                console.log(this.state.response.types[0].type.name);                           \n                \n                this.state.response.abilities.map(ConcatAbilities);\n                this.state.response.moves.map(ConcatMoves);\n                this.state.response.types.map(ConcatTypes);                \n\n                console.log(\"moves: \"+moves);\n                console.log(\"types: \"+types);        \n                console.log(\"abilities: \"+abilities);  \n                ReactDOM.render(<PokemonInfo    pokemon={this.state.value} \n                                                Image={this.state.image} \n                                                initialMove={this.state.move} \n                                                initialAbility={this.state.ability} \n                                                primaryType={this.state.type} />, \n                                                document.getElementById('pokemonInfo'));\n            }\n            catch(e) {         \n                ReactDOM.render(<span>something is wrong... maybe that pokemon doesnt exists... check the console log </span> , \n                    document.getElementById('pokemonInfo'));\n            }              \n        })\n    \n\n    // Se genera la peticiÃ³n\n    xhr.open('GET', url)\n    xhr.send()\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              <span><h2>Pokemon:</h2> </span>\n              <input className=\"inputText\" type=\"text\" value={this.state.value} onChange={this.handleChange} />           \n            <input type=\"submit\" value=\"Submit\" /> </label>\n          </form>\n        </header>\n      </div>\n    )\n  }\n}\nexport default PokeInfo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport PokeInfo from './PokeInfo';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<PokeInfo />, document.getElementById('pokemon'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}